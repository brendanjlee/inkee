{"version":3,"sources":["assets/inkee-logo.png","components/CanvasContext.js","components/GameCanvas.js","components/ClearCanvasButton.js","pages/home/home.js","components/header/header.js","pages/createLobby/createLobby.js","pages/joinLobby/joinLobby.js","pages/prestartLobby/prestartLobby.js","components/ColorPalette.js","components/UserProfile.js","components/StrokeThickness.js","pages/game/game.js","reactTesting/components/testComponent.js","reactTesting/components/NewGoal.js","reactTesting/testPage.js","App.js","reportWebVitals.js","index.js"],"names":["CanvasContext","React","createContext","CanvasProvider","children","socket","useState","isDrawing","setIsDrawing","canvasRef","useRef","contextRef","canvasEmpty","setCanvasEmpty","Provider","value","prepareCanvas","canvas","current","style","width","height","offsetWidth","offsetHeight","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","emit","x","y","finishDrawing","closePath","clearCanvas","fillStyle","fillRect","changeColor","color","changeLineWidth","lineWidthValue","exportImage","uri","toDataURL","console","log","startDrawingSocket","drawingData","finishDrawingSocket","drawSocket","thickness","lineTo","stroke","clearCanvasSocket","draw","useCanvas","useContext","GameCanvas","useEffect","on","off","onMouseDown","onMouseUp","onMouseMove","ref","ClearCanvasButton","className","onClick","Home","history","inviteCode","URLSearchParams","window","location","search","get","localStorage","setItem","handleHomeSubmit","path","userNameInput","document","getElementById","push","pathname","userData","uid","getItem","avatar","alert","src","Logo","alt","id","type","placeholder","align","Button","variant","size","CreateHeader","CreateLobby","numRounds","setNumRounds","roundLength","setRoundLength","textAreaContent","setTextAreaContent","csvContent","setCsvContent","handleSubmit","event","preventDefault","customWords","length","lines","split","i","line","filter","Boolean","j","word","toLowerCase","includes","parseCustomWords","gameConfiguration","num_rounds","round_length","custom_words","onSubmit","name","onChange","target","hidden","text","onDrop","words","data","onError","err","file","inputElem","reason","addRemoveButton","onRemoveFile","JoinLobby","joinById","PrestartLobby","setInviteCode","setUsers","setSettings","copyBtn","querySelector","handleClick","e","select","execCommand","addEventListener","removeEventListener","userListener","userToAdd","prevUsers","deleteUser","userId","user","settingListener","settingUpdate","prevSettings","key","populateSettings","settingsData","settings","startGame","defaultValue","origin","readOnly","ColorPalette","UserProfile","users","listItems","map","score","StrokeThickness","min","max","step","slider","parseInt","writeMessage","message","correctGuess","closeGuess","p","createElement","chatBox","createTextNode","messages","span","textContent","classList","add","append","appendChild","scrollTop","scrollHeight","Game","setMessages","loadPlayers","loadNewPlayer","disconnectPlayer","sendMessage","keyPressFunc","messageData","msg","CompoList","props","stuff","single_item","NewGoal","enteredText","setEnteredText","newGoal","Math","random","toString","onAddGoal","TestPage","courseGoals","setCourseGoals","prevCourseGoals","concat","App","setSocket","useHistory","clear","newSocket","io","hostname","transports","upgrade","opts","removeAllListeners","close","exact","render","component","testPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.0c960e19.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/inkee-logo.b7363c11.png\";","import React, { useContext, useRef, useState } from \"react\";\n\nconst CanvasContext = React.createContext();\n\nexport const CanvasProvider = ({ children, socket = null }) => {\n  const [isDrawing, setIsDrawing] = useState(false)\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const [canvasEmpty, setCanvasEmpty] = useState(true);\n\n  const prepareCanvas = () => {\n    const canvas = canvasRef.current\n    canvas.style.width ='100%';\n    canvas.style.height='100%';\n    canvas.width  = canvas.offsetWidth * 2;\n    canvas.height = canvas.offsetHeight * 2;\n    \n    const context = canvas.getContext(\"2d\")\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  };\n\n  const startDrawing = ({ nativeEvent }) => {\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n    setCanvasEmpty(false);\n    if (socket) {\n      socket.emit('startDrawing', {\n        x: offsetX,\n        y: offsetY,\n      });\n    }\n  };\n\n  const startDrawingSocket = (drawingData) => {\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(drawingData.x, drawingData.y);\n    setIsDrawing(true);\n    setCanvasEmpty(false);\n  };\n\n  const finishDrawingSocket = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const drawSocket = (drawingData) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.lineWidth = drawingData.thickness;\n    context.strokeStyle = drawingData.color;\n    contextRef.current.lineTo(drawingData.x, drawingData.y);\n    contextRef.current.stroke();\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n    if (socket) {\n      socket.emit('finishDrawing');\n    }\n  };\n\n  const draw = ({ nativeEvent }) => {\n    if (!isDrawing) {\n      return;\n    }\n    console.log('drawing');\n    const { offsetX, offsetY } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    contextRef.current.stroke();\n\n    if (socket) {\n      socket.emit('drawingEvent', {\n        x: offsetX,\n        y: offsetY,\n        thickness: context.lineWidth,\n        color: context.strokeStyle,\n      });\n    }\n  };\n\n  const clearCanvasSocket = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\")\n    context.fillStyle = \"white\"\n    context.fillRect(0, 0, canvas.width, canvas.height)\n    setCanvasEmpty(true);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\")\n    context.fillStyle = \"white\"\n    context.fillRect(0, 0, canvas.width, canvas.height)\n    setCanvasEmpty(true);\n    if (socket) {\n      socket.emit('clearCanvas');\n    }\n  }\n\n  const changeColor = color => () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.strokeStyle = color;\n  }\n\n  const changeLineWidth = (lineWidthValue) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.lineWidth = lineWidthValue;\n  }\n\n  const exportImage = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const uri = canvas.toDataURL(\"image/png\");\n    \n    if (canvasEmpty) {\n      throw 'Canvas is empty!';\n    }\n    console.log(uri);\n  }\n\n  return (\n    <CanvasContext.Provider\n      value={{\n        canvasRef,\n        contextRef,\n        prepareCanvas,\n        startDrawing,\n        finishDrawing,\n        clearCanvas,\n        changeColor,\n        changeLineWidth,\n        exportImage,\n        startDrawingSocket,\n        finishDrawingSocket,\n        drawSocket,\n        clearCanvasSocket,\n        draw,\n      }}\n    >\n      {children}\n    </CanvasContext.Provider>\n  );\n};\n\nexport const useCanvas = () => useContext(CanvasContext);","import React, { useEffect } from \"react\";\nimport { useCanvas } from \"./CanvasContext\";\n\nexport function GameCanvas({socket = null}) {\n  const {\n    canvasRef,\n    prepareCanvas,\n    startDrawing,\n    finishDrawing,\n    draw,\n    startDrawingSocket,\n    finishDrawingSocket,\n    drawSocket,\n    clearCanvasSocket,\n  } = useCanvas();\n\n  useEffect(() => {\n    prepareCanvas();\n  }, []);\n\n  // Socket game handlers.\n  useEffect(() => {\n    if (socket) {\n      socket.on('drawingEvent', drawSocket);\n      socket.on('clearCanvas', clearCanvasSocket);\n      socket.on('startDrawing', startDrawingSocket);\n      socket.on('finishDrawing', finishDrawingSocket);\n    }\n    \n    return () => {\n      if (socket) {\n        socket.off('drawingEvent', drawSocket);\n        socket.off('clearCanvas', clearCanvasSocket);\n        socket.off('startDrawing', startDrawingSocket);\n        socket.off('finishDrawing', finishDrawingSocket);\n      }\n    }\n  }, [socket]);\n\n  return (\n    <canvas\n      onMouseDown={startDrawing}\n      onMouseUp={finishDrawing}\n      onMouseMove={draw}\n      ref={canvasRef}\n    />\n  );\n}\n\nexport default GameCanvas;","import React from 'react'\nimport { useCanvas } from './CanvasContext'\n\nexport const ClearCanvasButton = () => {\n  const { clearCanvas } = useCanvas()\n\n  return <button className=\"btn2\" onClick={clearCanvas}>Clear</button>\n}","import './home.css'\nimport React, { useState, useRef } from 'react'\nimport Logo from '../../assets/inkee-logo.png'\nimport GameCanvas from '../../components/GameCanvas';\nimport { Button } from 'react-bootstrap';\nimport { CanvasProvider } from '../../components/CanvasContext';\nimport { ClearCanvasButton } from '../../components/ClearCanvasButton';\n\nfunction Home({socket, history}) {\n  const canvasRef = useRef();\n  const [canvasEmpty, setCanvasEmpty] = useState(true);\n  const query = new URLSearchParams(window.location.search);\n  const inviteCode = query.get('gameId');\n\n  if (inviteCode !== null) {\n    localStorage.setItem('inviteCode', inviteCode);\n  }\n\n  const handleHomeSubmit = (path, inviteCode = null) => {\n    const userNameInput = document.getElementById('username_input');\n    if (userNameInput.value !== '') {\n      localStorage.setItem('username', userNameInput.value);\n      console.log(userNameInput.value);\n    } else {\n      alert('Username cannot be empty!');\n      return;\n    }\n\n    if (inviteCode) {\n      socket.on('startGame', (inviteCode) => {\n        localStorage.setItem('inviteCode', inviteCode);\n        history.push({\n          pathname: '/game',\n        });\n      });\n\n      socket.on('inviteCode', () => {\n        localStorage.setItem('inviteCode', inviteCode);\n        history.push({\n          pathname: '/prestartLobby',\n        });\n      });\n\n      socket.emit('joinRoom', {\n        userData: {\n          uid: localStorage.getItem('username'),\n          avatar: 'tempAvatar',\n        },\n        inviteCode: localStorage.getItem('inviteCode'),\n      });\n    } else {\n      history.push({\n        pathname: path,\n      });\n    }\n  };\n\n  return (\n    <div className='root'>\n      <CanvasProvider>\n      <div className='purpleSplat'>\n        <div className='orangeSplat'>\n          <div className='header'>\n          <img className='logo' src={Logo} alt='inkee-logo'/>\n          </div>\n          <form>\n            <input className='username' id='username_input' type='text' placeholder=\"enter username...\"/>\n          </form>\n          <div align=\"center\">\n            <div className=\"homeDrawArea\">\n              <GameCanvas />\n            </div>\n            <div>\n              <Button onClick={() => {\n                handleHomeSubmit('/joinLobby', localStorage.getItem('inviteCode')); \n              }} className='btn' variant=\"secondary\" size='lg'>join game</Button>\n            </div>\n            <div>\n              {\n                !localStorage.getItem('inviteCode') &&\n                <Button onClick={() => {\n                  handleHomeSubmit('/createLobby')\n                }} className='btn' variant=\"outline-primary\" size='lg'>create game</Button>\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n      </CanvasProvider>\n    </div>\n  );\n}\nexport default Home;","import React from 'react';\n// Assets\nimport Logo from '../../assets/inkee-logo.png'\n\nfunction CreateHeader() {\n  return (\n    <div className='header'>\n      <img className='logo' src={Logo} alt='inkee-logo' />\n    </div>\n  );\n} \n\nexport default CreateHeader","import {React, useEffect, useState} from \"react\";\nimport { Link, history } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport CreateHeader from \"../../components/header/header\";\nimport { CSVReader } from \"react-papaparse\";\nimport './createLobby.css'\n\nfunction CreateLobby({socket, history}) {\n  // Game Settings\n  const [numRounds, setNumRounds] = useState(2);\n  const [roundLength, setRoundLength] = useState(30);\n  // Custom Words \n  const [textAreaContent, setTextAreaContent] = useState('');\n  const [csvContent, setCsvContent] = useState(null);\n\n  /**\n   * User sets round numbers\n   * @param {onChange} event \n   */\n  const handleNumRoundChange = (event) => {\n    setNumRounds(event.target.value);\n  };\n\n  /**\n   * User sets round lenght\n   * @param {onChange} event \n   */\n  const handleRoundLengthChange = (event) => {\n    setRoundLength(event.target.value);\n  };\n\n  /**\n   * User enters custom words in textArea\n   * @param {onChange} event \n   */\n  const handleTextAreaChange = (event) => {\n    let text = event.target.value\n    setTextAreaContent(text); \n  }\n\n  /**\n   *  User drops csv file into CSVReader\n   * @param {onDrop} event \n   */\n  const handleOnDrop = (event) => {\n    let words = [];\n    for (let i=0; i<event.length; i++) {\n      let word = event[i].data;\n      if (!words.includes(word[0])) words.push(word[0]);\n    }\n    setCsvContent(words);\n  }\n\n  /**\n   * User removes csv file from CSVReader\n   * @param {onRemoveFile} event \n   */\n  const handleOnRemoveFile = (event) => {\n    setCsvContent(null);\n  }\n\n  /**\n   * Error\n   */\n  const handleOnError = (err, file, inputElem, reason) => {\n    console.log(err);\n  }\n\n  /**\n   *  Parses through text area content and csv content and adds them to the\n   * custom word list.\n   * @param {String} textAreaContent \n   * @param {List} csvContent \n   */\n  const parseCustomWords = (textAreaContent, csvContent) => {\n    console.log('Parse Custom Words')\n    let customWords = [];\n    if (textAreaContent.length > 0) {\n      let lines = textAreaContent.split(/\\r\\n|\\r|\\n/);\n      for (let i=0; i<lines.length; i++) {\n        let line = lines[i].split(/[ ,]+/).filter(Boolean);\n        for (let j = 0; j < line.length; j++) {\n          const word = line[j].toLowerCase();\n          if (!customWords.includes(word)) {\n            customWords.push(word);\n          }\n        }\n      }\n      console.log('textAreaContent Created');\n    }\n\n    if (csvContent != null) {\n      for (let i=0; i < csvContent.length; i++) {\n        let word = csvContent[i];\n        word = word.toLowerCase();\n        if (!customWords.includes(word)) {\n          customWords.push(word);\n        }\n      }\n      console.log('csvContent Created');\n    }\n\n    // delete after sprint reivew\n    if (customWords.length < 10 && customWords.length > 0) {\n      alert(\"Entered less than 10 custom words\");\n    }\n\n    return customWords\n  }\n\n  useEffect(() => {\n    socket.on('inviteCode', (inviteCode) => {\n      console.log(inviteCode);\n      // Join game room generated by server.\n      localStorage.setItem('inviteCode', inviteCode);\n      history.push({\n        pathname: '/prestartLobby'\n      });\n    });\n\n    return () => {\n      socket.off('inviteCode');\n    };\n  }, [socket, history]);\n\n  /**\n   * Submit game configeration to backend\n   * @param {onClick} event \n   */\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    // Populate customWordList\n    let customWords = parseCustomWords(textAreaContent, csvContent);\n\n    // create gameConfiguration\n    // Use default word list if custom_words is empty\n    let gameConfiguration = {\n      num_rounds: numRounds,\n      round_length: roundLength,\n      custom_words: [],\n    }\n\n    // add custom words if possible\n    if (customWords.length > 0) {\n      gameConfiguration['custom_words'] = customWords;\n    }\n\n    //console.log(gameConfiguration)\n\n    // create userData\n    const userData = {\n      uid: localStorage.getItem('username'),\n      avatar: 'tempAvatar',\n    }\n    \n    socket.emit('createGame', {\n      gameConfiguration,\n      userData,\n    });\n    console.log('socket emit invite code')\n  }\n\n  return (\n    <div className='lobbyRoot'>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <select\n          id=\"numRounds\"\n          name=\"numRounds\"\n          onChange={handleNumRoundChange}\n          value={numRounds}\n          className=\"select\"\n        >\n          <option hidden={true}>choose rounds</option>\n          <option value=\"1rounds\">1</option>\n          <option value=\"2rounds\">2</option>\n          <option value=\"3rounds\">3</option>\n          <option value=\"4rounds\">4</option>\n          <option value=\"5rounds\">5</option>\n          <option value=\"6rounds\">6</option>\n          <option value=\"7rounds\">7</option>\n          <option value=\"8rounds\">8</option>\n          <option value=\"9rounds\">9</option>\n          <option value=\"10rounds\">10</option>\n        </select>\n        <select\n          id=\"roundLength\"\n          name=\"roundLength\"\n          onChange={handleRoundLengthChange}\n          value={roundLength}\n          className=\"select\"\n        >\n          <option hidden={true}>drawing time</option>\n          <option value=\"30seconds\">30</option>\n          <option value=\"40seconds\">40</option>\n          <option value=\"50seconds\">50</option>\n          <option value=\"60seconds\">60</option>\n          <option value=\"70seconds\">70</option>\n          <option value=\"80seconds\">80</option>\n          <option value=\"90seconds\">90</option>\n          <option value=\"120seconds\">120</option>\n          <option value=\"180seconds\">180</option>\n        </select>\n        <div className='wordlist'>\n          <label>Custom Words:</label>\n          <br/>\n          <textarea\n              placeholder='Enter Custom Words...'\n              value={textAreaContent}\n              onChange={handleTextAreaChange}\n              >\n            </textarea>\n            <div className='csvReader'>\n              <h5>Or Upload a CSV File</h5>\n              <CSVReader\n                onDrop={handleOnDrop}\n                onError={handleOnError}\n                addRemoveButton\n                onRemoveFile={handleOnRemoveFile}\n              >\n                <span>Drop CSV file here or click to upload.</span>\n              </CSVReader>\n            </div>\n        </div> \n        <Button variant='primary' onClick={handleSubmit}>start game</Button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateLobby;","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport CreateHeader from \"../../components/header/header\";\nimport './joinLobby.css'\n\nfunction JoinLobby({socket, history}) {\n  useEffect(() => {\n    socket.on('startGame', (inviteCode) => {\n      localStorage.setItem('inviteCode', inviteCode);\n      history.push({\n        pathname: '/game',\n      });\n    });\n\n    socket.on('inviteCode', (inviteCode) => {\n      localStorage.setItem('inviteCode', inviteCode);\n      history.push({\n        pathname: '/prestartLobby',\n      });\n    });\n  }, [socket, history]);\n\n  const handleSubmit = (inviteCode = null, joinById) => {\n    const userData = {\n      userData: {\n        uid: localStorage.getItem('username'),\n        avatar: 'tempAvatar',\n      },\n      inviteCode: inviteCode,\n    };\n\n    if (joinById && inviteCode === '') {\n      alert(\"Game ID text box is empty!\");\n    } else if (joinById && inviteCode !== '') {\n      userData['inviteCode'] = inviteCode;\n      socket.emit('joinRoom', userData);\n    } else if (!joinById) {\n      socket.emit('joinRandomRoom', userData);\n    }\n  };\n\n  return (\n    <div className='root'>\n      <div className='greenSplat'>\n        <div className='orangeSplatTwo'>\n        <CreateHeader/>\n          <form className='form-group'>\n              <input id='id_input' className='username' type=\"text\" placeholder=\"enter game ID...\"/><br />\n              <Button variant='primary' onClick={() => {\n                handleSubmit(document.getElementById('id_input').value, true);\n              }}>join with ID</Button>\n          </form>\n          <Button variant='primary' onClick={() => {\n            handleSubmit(document.getElementById('id_input').value, false);\n          }}>join random game</Button>\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default JoinLobby","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport CreateHeader from \"../../components/header/header\";\nimport './prestartLobby.css'\n\nfunction PrestartLobby({socket, history}) {\n  const [inviteCode, setInviteCode] = useState('');\n  const [users, setUsers] = useState([]);\n  const [settings, setSettings] = useState({});\n  \n  // Copy button setup.\n  useEffect(() => {\n    const copyBtn = document.querySelector('#copy.copyBtn');\n    const handleClick = (e) => {\n      e.preventDefault();\n      document.querySelector('#gameLink').select();\n      document.execCommand('copy');\n    };\n\n    copyBtn.addEventListener('click', handleClick);\n\n    return () => {\n      copyBtn.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  \n  // User routines.\n  useEffect(() => {\n    const userListener = (userToAdd) => {\n      setUsers((prevUsers) => {\n        const newUsers = [...prevUsers, userToAdd];\n        return newUsers;\n      });\n    };\n    \n    const deleteUser = (userId) => {\n      setUsers((prevUsers) => {\n        const newUsers = prevUsers.filter((user) => user.uid !== userId);\n        return newUsers;\n      });\n    };\n  \n    socket.on('newUser', userListener);\n    socket.on('disconnection', deleteUser);\n    socket.emit('getPlayers');\n\n    return () => {\n      socket.off('newUser', userListener);\n      socket.off('disconnection', deleteUser);\n    };\n  }, [socket]);\n\n  // Setting routines.\n  useEffect(() => {\n    const settingListener = (settingUpdate) => {\n      setSettings((prevSettings) => {\n        const key = settingUpdate.key;\n        const value = settingUpdate.value;\n\n        prevSettings[key] = value;\n        return prevSettings;\n      });\n    };\n\n    const populateSettings = (settingsData) => {\n      setSettings(settingsData.settings);\n    }\n\n    socket.on('settingUpdate', settingListener);\n    socket.on('loadSettings', populateSettings);\n    socket.emit('getSettings');\n\n    return () => {\n      socket.off('settingUpdate', settingListener);\n      socket.off('loadSettings', populateSettings);\n    }\n  }, [socket]);\n\n  // Start-game routines.\n  useEffect(() => {\n    const startGame = () => {\n      history.push({\n        pathname: '/game',\n      });\n    }\n    socket.on('startGame', startGame);\n\n    return () => {\n      socket.off('startGame', startGame);\n    }\n  }, [socket, history]);\n\n  useEffect(() => {\n    setInviteCode(localStorage.getItem('inviteCode'));\n  }, [history]);\n\n  return (\n    <div className='root'>\n      <CreateHeader/>\n      <div className='content'>\n        <div className='game-id'>\n          <p>Game ID: {inviteCode}</p>\n        </div>\n         <div className=\"mt-5\">\n        <h1 className=\"text-white text-center\">Invite your friends!</h1>\n        <div className=\"input-group mb-3\">\n            <input type=\"text\" id=\"gameLink\" className=\"form-control text-center fw-bold bg-white\"\n              defaultValue={window.location.origin + '/' + inviteCode} readOnly>\n            </input>\n            <button className=\"copyBtn\" type=\"button\" id=\"copy\">Copy Link</button>\n          </div>\n        </div>\n        <div className='lobby-players'>\n          <ul>\n            <li>Coffee</li>\n            <li>Tea</li>\n            <li>Milk</li>\n          </ul>\n        </div>\n        <Button onClick={() => {\n          socket.emit('startGame');\n        }} variant='primary'>Ready</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default PrestartLobby\n","import React from 'react'\nimport { useCanvas } from './CanvasContext'\n\nexport const ColorPalette = () => {\n  const { changeColor } = useCanvas()\n\n  return (\n    <div>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"blue\")}></button>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"red\")}></button>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"green\")}></button>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"yellow\")}></button>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"pink\")}></button>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"orange\")}></button>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"purple\")}></button>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"brown\")}></button>\n      <button id=\"colorButton\" className=\"color\" onClick={changeColor(\"black\")}></button>\n    </div>\n  );\n}","import { React } from 'react';\n\nexport function UserProfile({users = []}) {\n  const listItems = users.map((user) =>\n    <div className=\"userProfile\" id={user.uid}>\n      <div>\n        <b>{user.uid}</b>\n      </div>\n      <div>\n        Score: {user.score}\n      </div>\n    </div>);\n\n  return (\n      <div className=\"profiles\">\n        {listItems}\n      </div>\n  );\n}\n\nexport default UserProfile;","import React from \"react\";\nimport { useState } from \"react\";\nimport { useCanvas } from \"./CanvasContext\";\n\nexport const StrokeThickness = () => {\n  const { changeLineWidth } = useCanvas();\n\n  return (\n    <div>\n      <input id=\"typeinp\"\n        type=\"range\"\n        min=\"1\"\n        max=\"15\"\n        defaultValue=\"5\"\n        step=\"1\"\n        onChange={(event) => {\n          let slider = (parseInt(event.target.value));\n          changeLineWidth(slider);\n        }}\n      />\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\n//Style\nimport './game.css'\n// Assets\nimport GameCanvas from '../../components/GameCanvas';\nimport { CanvasProvider } from \"../../components/CanvasContext\";\nimport { ClearCanvasButton } from \"../../components/ClearCanvasButton\";\nimport { ColorPalette } from \"../../components/ColorPalette\";\nimport { UserProfile } from \"../../components/UserProfile\";\nimport { StrokeThickness } from \"../../components/StrokeThickness\";\n\nfunction Game({socket, history}) {\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n\n  /* Load player routine */\n  useEffect(() => {\n    const loadPlayers = (users) => {\n      setUsers(users);\n    };\n\n    socket.on('getPlayers', loadPlayers);\n  \n    const loadNewPlayer = (userData) => {\n      setUsers((prevUsers) => {\n        const newUsers = [...prevUsers, userData];\n        return newUsers;\n      });\n    };\n\n    socket.on('newPlayer', loadNewPlayer);\n\n    const disconnectPlayer = (userId) => {\n      setUsers((prevUsers) => {\n        const newUsers = prevUsers.filter((user) => user.uid !== userId);\n        return newUsers;\n      });\n    };\n\n    socket.on('disconnection', disconnectPlayer);\n\n    socket.emit('getPlayers');\n\n    return () => {\n      socket.off('getPlayers', loadPlayers);\n      socket.off('newPlayer', loadNewPlayer);\n      socket.off('disconnection', disconnectPlayer);\n    }\n  }, [socket]);\n\n  useEffect(() => {\n    const sendMessage = document.querySelector('#sendMessage');\n    const keyPressFunc = (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        const message = sendMessage.value;\n        sendMessage.value = '';\n        socket.emit('chatMessage', { message });\n        console.log(message);\n      }\n    }\n    sendMessage.addEventListener('keypress', keyPressFunc);\n\n    socket.on('chatMessage', (data) => {\n      console.log(data);\n      setMessages([...messages, data]);\n      writeMessage({\n        name: data.uid,\n        message: data.message\n      });\n    });\n\n    socket.on('closeGuess', (data) => {\n      console.log(data);\n      setMessages([...messages, data]);\n      writeMessage({\n        name: data.uid,\n        message: data.message,\n       }, { closeGuess: true });\n    });\n\n    socket.on('correctGuess', (messageData) => {\n      console.log(messageData);\n      setMessages([...messages, messageData]);\n      writeMessage({\n        name: messageData.uid,\n        message: messageData.message,\n       }, { correctGuess: true });\n    });\n\n    socket.on('ERROR', (msg) => {\n      console.log(msg);\n    });\n\n    return () => {\n      socket.off('ERROR');\n      socket.off('correctGuess');\n      socket.off('closeGuess');\n      socket.off('chatMessage');\n      sendMessage.removeEventListener('keypress', keyPressFunc);\n    }\n  }, [socket, messages])\n\n  return (\n    <div className='gameRoot'>\n      <CanvasProvider socket={socket}>\n        <div className='purpleSplatTwo'>\n          <div className='limeSplat'>\n            <div className='inkeeLogo'>\n              <div className=\"topContainer\" >\n                <div className=\"word\" >word</div>\n                <div className=\"time\" > 3:19 </div>\n              </div>\n              <div className=\"middleContainer\">\n                <UserProfile users={users}/>\n                <div className=\"drawArea\">\n                  <GameCanvas socket={socket}/>\n                </div>\n                <div className=\"chat\" id='chat'></div>\n              </div>\n              <div className=\"bottomContainer\">\n                <div className=\"sendMessage\">\n                  <input type='text' id='sendMessage' placeholder=\"enter guess...\"/>\n                </div>\n                <ClearCanvasButton/>\n                <StrokeThickness />\n                <ColorPalette/>\n              </div>\n            </div>\n          </div>\n        \n        </div>\n      </CanvasProvider>\n    </div>\n  );\n}\n\nconst writeMessage = ({ name = '', message}, {correctGuess = false, closeGuess = false} = {}) => {\n  const p = document.createElement('p');\n  const chatBox = document.createTextNode(`${message}`);\n  const messages = document.getElementById('chat');\n  if (name !== '') {\n    const span = document.createElement('span');\n    span.textContent = `${name}: `;\n    span.classList.add('fw-bold');\n    p.append(span);\n  }\n  p.classList.add('p-2', 'mb-0');\n  p.append(chatBox);\n  if (closeGuess) {\n    p.classList.add('closeAnswer');\n  }\n\n  if (correctGuess) {\n    p.classList.add('correctAnswer');\n  }\n\n  messages.appendChild(p);\n  messages.scrollTop = messages.scrollHeight;\n}\n\nexport default Game","import React from \"react\";\n\nfunction CompoList(props) {\n  console.log(props.stuff);\n\n  // You need to map() eveyr prop into something that jsx can redner \n  return (\n    <ul className='goal-list'> {\n      props.stuff.map((single_item) => {\n        return <li key={single_item.id}>{single_item.text}</li>\n      })\n    }\n    </ul>\n  );\n}\n\nexport default CompoList","import React from \"react\";\nimport { useState } from \"react\";\n\nconst NewGoal = (props) => {\n  // let enteredText = ''; // This only sets a variable. Use states\n  const [enteredText, setEnteredText] = useState('');\n\n  // used for the event listener \n  const addGoalHandler = (event) => {\n    event.preventDefault(); \n    \n    // will get generated every time the form is submitted\n    // How do we pass new goal into the parent component? -> callback from parent to child\n    const newGoal = {\n      id: Math.random().toString(),\n      text: enteredText\n    };    \n\n    props.onAddGoal(newGoal); // executes the function pointed by onAddGoal()\n    console.log(`@addGoalHandler: ${newGoal.id}`);\n\n    setEnteredText('');\n  }\n\n  // For capturiing user input with the onChange() handler\n  const textChangeHandler = event => {\n    //enteredText = event.target.value;\n    setEnteredText(event.target.value); // update the state\n  };\n\n  // add eventlisterns by onSomething\n  // pass in a function (it just points to it for now)\n  return (\n    <form className='new-goal' onSubmit={addGoalHandler}>\n      <input type='text' value={enteredText} onChange={textChangeHandler}/>\n      <button type='submit'>Add Goal</button>\n    </form>\n  );\n}\n\nexport default NewGoal ","import React from \"react\";\nimport { useState } from \"react\";  // react Hook for functional components\nimport CompoList from \"./components/testComponent\";\nimport NewGoal from \"./components/NewGoal\";\n\nfunction TestPage() {\n  // testing with props\n  const goalsList = [{id: 'cg1', text: 'Finish CS 490'},\n                    {id: 'cg2', text: 'Start STAT 417'}];\n\n  // Create an initial state -> array of goals\n  const [courseGoals, setCourseGoals] = useState([{id: 'cg1', text: 'Finish CS 490'},\n                                                  {id: 'cg2', text: 'Start STAT 417'}]); // extract out of useState\n\n  const addNewGoalHandler = (newGoal) => {\n    //setCourseGoals(courseGoals.concat(newGoal)); // concats it to the list created by use state\n    // you can do the same thing with a function (bulletproof appraoch)\n    setCourseGoals((prevCourseGoals) => {\n      return prevCourseGoals.concat(newGoal);\n    })\n  }\n\n  return (\n    <div>\n      <div className='input'>\n        <h3> Testing with input </h3>\n        <NewGoal onAddGoal={addNewGoalHandler /* send in a pointer to addNewGoalHandler() */}/>\n        <h3>Prop a list into page</h3>\n        <CompoList stuff={courseGoals} />\n      </div>\n    </div>\n  ); \n}\n\nexport default TestPage","import './App.css';\nimport React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport Home from './pages/home/home';\nimport CreateLobby from './pages/createLobby/createLobby';\nimport JoinLobby from './pages/joinLobby/joinLobby';\nimport PrestartLobby from './pages/prestartLobby/prestartLobby';\nimport Game from './pages/game/game';\nimport testPage from './reactTesting/testPage';\nimport io from 'socket.io-client';\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const history = useHistory();\n\n  useEffect(() => {\n    localStorage.clear();\n\n    return () => {\n      localStorage.clear();\n    }\n  }, []);\n\n  useEffect(() => {\n    // Initialize Socket connection.\n    const newSocket = io(`http://${window.location.hostname}:3001`, {\n      transports: ['websocket', 'polling'],\n      upgrade: true,\n    });\n    \n    const reconnect = () => {\n      newSocket.io.opts.transports = [\"polling\", \"websocket\"];\n    };\n\n    newSocket.on(\"connect_error\", reconnect);\n    setSocket(newSocket);\n\n    // Clean-up routine for socket.\n    return () => {\n      newSocket.removeAllListeners();\n      newSocket.close();\n    }\n  }, [setSocket]);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path='/' exact render={(props) => (<Home socket={socket} history={history} {...props} />)}/>\n          <Route path='/createLobby' render={(props) => (<CreateLobby socket={socket} history={history} {...props} />)}/>\n          <Route path='/joinLobby' render={(props) => (<JoinLobby socket={socket} history={history} {...props} />)}/>\n          <Route path='/prestartLobby' render={(props) => (<PrestartLobby socket={socket} history={history} {...props} />)}/>\n          <Route path='/game' render={(props) => (<Game socket={socket} history={history} {...props} />)}/>\n          <Route path='/testPage' component={testPage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}